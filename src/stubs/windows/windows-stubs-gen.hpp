// Generated by gen-winfuncs.ml. Do not edit.

namespace sqt { namespace winapi {
#if !defined(SQT_WINSTUBS_NO_FPTR_DECL)
struct zz_func_table_advapi32 {
    union {
        struct {
            BOOLEAN (__stdcall *_SystemFunction036) (PVOID RandomBuffer, ULONG RandomBufferLength);
        } funcs;
        void *ptrs[1];
    };
};
struct zz_func_table_dwmapi {
    union {
        struct {
            HRESULT (__stdcall *_DwmIsCompositionEnabled) (BOOL * pfEnabled);
            HRESULT (__stdcall *_DwmEnableBlurBehindWindow) (HWND hWnd, DWM_BLURBEHIND const * pBlurBehind);
            HRESULT (__stdcall *_DwmSetWindowAttribute) (HWND hwnd, DWORD dwAttribute, LPCVOID pvAttribute, DWORD cbAttribute);
            HRESULT (__stdcall *_DwmGetWindowAttribute) (HWND hwnd, DWORD dwAttribute, PVOID pvAttribute, DWORD cbAttribute);
        } funcs;
        void *ptrs[4];
    };
};
struct zz_func_table_gdi32 {
    union {
        struct {
            int (__stdcall *_AddFontResourceExW) (LPCWSTR name, DWORD fl, PVOID res);
            HANDLE (__stdcall *_AddFontMemResourceEx) (PVOID pFileView, DWORD cjSize, PVOID pvReserved, DWORD * pNumFonts);
            BOOL (__stdcall *_RemoveFontResourceExW) (LPCWSTR name, DWORD fl, PVOID pdv);
            BOOL (__stdcall *_RemoveFontMemResourceEx) (HANDLE h);
            DWORD (__stdcall *_SetLayout) (HDC hdc, DWORD l);
        } funcs;
        void *ptrs[5];
    };
};
struct zz_func_table_imm32 {
    union {
        struct {
            BOOL (__stdcall *_ImmAssociateContextEx) (HWND hWnd, HIMC hIMC, DWORD dwFlags);
        } funcs;
        void *ptrs[1];
    };
};
struct zz_func_table_kernel32 {
    union {
        struct {
            BOOL (__stdcall *_CancelIoEx) (HANDLE hFile, LPOVERLAPPED lpOverlapped);
            DWORD (__stdcall *_GetProcessId) (HANDLE Process);
            void (__stdcall *_GetNativeSystemInfo) (LPSYSTEM_INFO lpSystemInfo);
            BOOL (__stdcall *_CheckRemoteDebuggerPresent) (HANDLE hProcess, PBOOL pbDebuggerPresent);
            DWORD (__stdcall *_WTSGetActiveConsoleSessionId) ();
            BOOL (__stdcall *_GetVolumeNameForVolumeMountPointW) (LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength);
            BOOL (__stdcall *_GetVolumePathNameW) (LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength);
            BOOL (__stdcall *_SetFilePointerEx) (HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod);
            BOOL (__stdcall *_RegisterWaitForSingleObject) (PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags);
            BOOL (__stdcall *_UnregisterWaitEx) (HANDLE WaitHandle, HANDLE CompletionEvent);
            DWORD (__stdcall *_GetLongPathNameW) (LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer);
            HWND (__stdcall *_GetConsoleWindow) ();
        } funcs;
        void *ptrs[12];
    };
};
struct zz_func_table_shell32 {
    union {
        struct {
            HRESULT (__stdcall *_SHGetKnownFolderPath) (REFKNOWNFOLDERID rfid, DWORD dwFlags, HANDLE hToken, PWSTR * ppszPath);
            HRESULT (__stdcall *_SHGetKnownFolderIDList) (REFKNOWNFOLDERID rfid, DWORD dwFlags, HANDLE hToken, PIDLIST_ABSOLUTE * ppidl);
            HRESULT (__stdcall *_SHCreateItemFromParsingName) (PCWSTR pszPath, IBindCtx * pbc, REFIID riid, void * * ppv);
            HRESULT (__stdcall *_SHCreateItemFromIDList) (PCIDLIST_ABSOLUTE pidl, REFIID riid, void * * ppv);
            HRESULT (__stdcall *_SHGetStockIconInfo) (SHSTOCKICONID siid, UINT uFlags, SHSTOCKICONINFO * psii);
            HRESULT (__stdcall *_Shell_NotifyIconGetRect) (NOTIFYICONIDENTIFIER const * identifier, RECT * iconLocation);
            HRESULT (__stdcall *_SHGetImageList) (int iImageList, REFIID riid, void * * ppvobj);
            BOOL (__stdcall *_SHGetSpecialFolderPathW) (HWND hwnd, LPWSTR pszPath, int csidl, BOOL fCreate);
        } funcs;
        void *ptrs[8];
    };
};
struct zz_func_table_user32 {
    union {
        struct {
            BOOL (__stdcall *_RegisterTouchWindow) (HWND hwnd, ULONG ulFlags);
            BOOL (__stdcall *_UnregisterTouchWindow) (HWND hwnd);
            BOOL (__stdcall *_IsTouchWindow) (HWND hwnd, PULONG pulFlags);
            BOOL (__stdcall *_CloseTouchInputHandle) (HTOUCHINPUT hTouchInput);
            BOOL (__stdcall *_GetTouchInputInfo) (HTOUCHINPUT hTouchInput, UINT cInputs, PTOUCHINPUT pInputs, int cbSize);
            BOOL (__stdcall *_UpdateLayeredWindowIndirect) (HWND hwnd, UPDATELAYEREDWINDOWINFO const * pULWInfo);
            BOOL (__stdcall *_ChangeWindowMessageFilterEx) (HWND hwnd, UINT message, DWORD action, PCHANGEFILTERSTRUCT pChangeFilterStruct);
            HPOWERNOTIFY (__stdcall *_RegisterPowerSettingNotification) (HANDLE hRecipient, LPCGUID PowerSettingGuid, DWORD Flags);
            BOOL (__stdcall *_UnregisterPowerSettingNotification) (HPOWERNOTIFY Handle);
            HDEVNOTIFY (__stdcall *_RegisterDeviceNotificationW) (HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags);
            BOOL (__stdcall *_UnregisterDeviceNotification) (HDEVNOTIFY Handle);
            BOOL (__stdcall *_SetLayeredWindowAttributes) (HWND hwnd, COLORREF crKey, BYTE bAlpha, DWORD dwFlags);
            BOOL (__stdcall *_UpdateLayeredWindow) (HWND hWnd, HDC hdcDst, POINT * pptDst, SIZE * psize, HDC hdcSrc, POINT * pptSrc, COLORREF crKey, BLENDFUNCTION * pblend, DWORD dwFlags);
            HMONITOR (__stdcall *_MonitorFromPoint) (POINT pt, DWORD dwFlags);
            HMONITOR (__stdcall *_MonitorFromWindow) (HWND hwnd, DWORD dwFlags);
            BOOL (__stdcall *_EnumDisplayMonitors) (HDC hdc, LPCRECT lprcClip, MONITORENUMPROC lpfnEnum, LPARAM dwData);
            BOOL (__stdcall *_GetMonitorInfoW) (HMONITOR hMonitor, LPMONITORINFO lpmi);
        } funcs;
        void *ptrs[17];
    };
};
struct zz_func_table_wtsapi32 {
    union {
        struct {
            BOOL (__stdcall *_WTSQuerySessionInformationW) (HANDLE hServer, DWORD SessionId, WTS_INFO_CLASS WTSInfoClass, LPWSTR * ppBuffer, DWORD * pBytesReturned);
            void (__stdcall *_WTSFreeMemory) (PVOID pMemory);
        } funcs;
        void *ptrs[2];
    };
};
#endif // !defined(SQT_WINSTUBS_NO_FPTR_DECL)

extern zz_func_table_advapi32 zz_funcs_advapi32;

extern zz_func_table_dwmapi zz_funcs_dwmapi;

extern zz_func_table_gdi32 zz_funcs_gdi32;

extern zz_func_table_imm32 zz_funcs_imm32;

extern zz_func_table_kernel32 zz_funcs_kernel32;

extern zz_func_table_shell32 zz_funcs_shell32;

extern zz_func_table_user32 zz_funcs_user32;

extern zz_func_table_wtsapi32 zz_funcs_wtsapi32;

#if !defined(SQT_WINSTUBS_NO_IMPLEMENTATION)
#if defined(SQT_WINSTUBS_IMPLEMENTATION_advapi32)
static BOOLEAN __stdcall
resolve_SystemFunction036(PVOID RandomBuffer, ULONG RandomBufferLength)
{
    ::sqt::winapi::winapi_resolve_advapi32();
    return ::sqt::winapi::zz_funcs_advapi32.funcs._SystemFunction036(RandomBuffer, RandomBufferLength);
}

static BOOLEAN __stdcall
stub_SystemFunction036(PVOID RandomBuffer, ULONG RandomBufferLength);

static zz_func_table_advapi32 const zz_stub_funcs_advapi32 = {
    &stub_SystemFunction036,
};

zz_func_table_advapi32 zz_funcs_advapi32 = {
    &resolve_SystemFunction036,
};
static char symnames_advapi32[1][18] = {
    /* 0 */ "SystemFunction036",
};
#endif

#if defined(SQT_WINSTUBS_IMPLEMENTATION_dwmapi)
static HRESULT __stdcall
resolve_DwmIsCompositionEnabled(BOOL * pfEnabled)
{
    ::sqt::winapi::winapi_resolve_dwmapi();
    return ::sqt::winapi::zz_funcs_dwmapi.funcs._DwmIsCompositionEnabled(pfEnabled);
}

static HRESULT __stdcall
resolve_DwmEnableBlurBehindWindow(HWND hWnd, DWM_BLURBEHIND const * pBlurBehind)
{
    ::sqt::winapi::winapi_resolve_dwmapi();
    return ::sqt::winapi::zz_funcs_dwmapi.funcs._DwmEnableBlurBehindWindow(hWnd, pBlurBehind);
}

static HRESULT __stdcall
resolve_DwmSetWindowAttribute(HWND hwnd, DWORD dwAttribute, LPCVOID pvAttribute, DWORD cbAttribute)
{
    ::sqt::winapi::winapi_resolve_dwmapi();
    return ::sqt::winapi::zz_funcs_dwmapi.funcs._DwmSetWindowAttribute(hwnd, dwAttribute, pvAttribute, cbAttribute);
}

static HRESULT __stdcall
resolve_DwmGetWindowAttribute(HWND hwnd, DWORD dwAttribute, PVOID pvAttribute, DWORD cbAttribute)
{
    ::sqt::winapi::winapi_resolve_dwmapi();
    return ::sqt::winapi::zz_funcs_dwmapi.funcs._DwmGetWindowAttribute(hwnd, dwAttribute, pvAttribute, cbAttribute);
}

static HRESULT __stdcall
stub_DwmIsCompositionEnabled(BOOL * pfEnabled);

static HRESULT __stdcall
stub_DwmEnableBlurBehindWindow(HWND hWnd, DWM_BLURBEHIND const * pBlurBehind);

static HRESULT __stdcall
stub_DwmSetWindowAttribute(HWND hwnd, DWORD dwAttribute, LPCVOID pvAttribute, DWORD cbAttribute);

static HRESULT __stdcall
stub_DwmGetWindowAttribute(HWND hwnd, DWORD dwAttribute, PVOID pvAttribute, DWORD cbAttribute);

static zz_func_table_dwmapi const zz_stub_funcs_dwmapi = {
    &stub_DwmIsCompositionEnabled,
    &stub_DwmEnableBlurBehindWindow,
    &stub_DwmSetWindowAttribute,
    &stub_DwmGetWindowAttribute,
};

zz_func_table_dwmapi zz_funcs_dwmapi = {
    &resolve_DwmIsCompositionEnabled,
    &resolve_DwmEnableBlurBehindWindow,
    &resolve_DwmSetWindowAttribute,
    &resolve_DwmGetWindowAttribute,
};
static char symnames_dwmapi[4][26] = {
    /* 0 */ "DwmIsCompositionEnabled",
    /* 1 */ "DwmEnableBlurBehindWindow",
    /* 2 */ "DwmSetWindowAttribute",
    /* 3 */ "DwmGetWindowAttribute",
};
#endif

#if defined(SQT_WINSTUBS_IMPLEMENTATION_gdi32)
static int __stdcall
resolve_AddFontResourceExW(LPCWSTR name, DWORD fl, PVOID res)
{
    ::sqt::winapi::winapi_resolve_gdi32();
    return ::sqt::winapi::zz_funcs_gdi32.funcs._AddFontResourceExW(name, fl, res);
}

static HANDLE __stdcall
resolve_AddFontMemResourceEx(PVOID pFileView, DWORD cjSize, PVOID pvReserved, DWORD * pNumFonts)
{
    ::sqt::winapi::winapi_resolve_gdi32();
    return ::sqt::winapi::zz_funcs_gdi32.funcs._AddFontMemResourceEx(pFileView, cjSize, pvReserved, pNumFonts);
}

static BOOL __stdcall
resolve_RemoveFontResourceExW(LPCWSTR name, DWORD fl, PVOID pdv)
{
    ::sqt::winapi::winapi_resolve_gdi32();
    return ::sqt::winapi::zz_funcs_gdi32.funcs._RemoveFontResourceExW(name, fl, pdv);
}

static BOOL __stdcall
resolve_RemoveFontMemResourceEx(HANDLE h)
{
    ::sqt::winapi::winapi_resolve_gdi32();
    return ::sqt::winapi::zz_funcs_gdi32.funcs._RemoveFontMemResourceEx(h);
}

static DWORD __stdcall
resolve_SetLayout(HDC hdc, DWORD l)
{
    ::sqt::winapi::winapi_resolve_gdi32();
    return ::sqt::winapi::zz_funcs_gdi32.funcs._SetLayout(hdc, l);
}

static int __stdcall
stub_AddFontResourceExW(LPCWSTR name, DWORD fl, PVOID res);

static HANDLE __stdcall
stub_AddFontMemResourceEx(PVOID pFileView, DWORD cjSize, PVOID pvReserved, DWORD * pNumFonts);

static BOOL __stdcall
stub_RemoveFontResourceExW(LPCWSTR name, DWORD fl, PVOID pdv);

static BOOL __stdcall
stub_RemoveFontMemResourceEx(HANDLE h);

static DWORD __stdcall
stub_SetLayout(HDC hdc, DWORD l);

static zz_func_table_gdi32 const zz_stub_funcs_gdi32 = {
    &stub_AddFontResourceExW,
    &stub_AddFontMemResourceEx,
    &stub_RemoveFontResourceExW,
    &stub_RemoveFontMemResourceEx,
    &stub_SetLayout,
};

zz_func_table_gdi32 zz_funcs_gdi32 = {
    &resolve_AddFontResourceExW,
    &resolve_AddFontMemResourceEx,
    &resolve_RemoveFontResourceExW,
    &resolve_RemoveFontMemResourceEx,
    &resolve_SetLayout,
};
static char symnames_gdi32[5][24] = {
    /* 0 */ "AddFontResourceExW",
    /* 1 */ "AddFontMemResourceEx",
    /* 2 */ "RemoveFontResourceExW",
    /* 3 */ "RemoveFontMemResourceEx",
    /* 4 */ "SetLayout",
};
#endif

#if defined(SQT_WINSTUBS_IMPLEMENTATION_imm32)
static BOOL __stdcall
resolve_ImmAssociateContextEx(HWND hWnd, HIMC hIMC, DWORD dwFlags)
{
    ::sqt::winapi::winapi_resolve_imm32();
    return ::sqt::winapi::zz_funcs_imm32.funcs._ImmAssociateContextEx(hWnd, hIMC, dwFlags);
}

static BOOL __stdcall
stub_ImmAssociateContextEx(HWND hWnd, HIMC hIMC, DWORD dwFlags);

static zz_func_table_imm32 const zz_stub_funcs_imm32 = {
    &stub_ImmAssociateContextEx,
};

zz_func_table_imm32 zz_funcs_imm32 = {
    &resolve_ImmAssociateContextEx,
};
static char symnames_imm32[1][22] = {
    /* 0 */ "ImmAssociateContextEx",
};
#endif

#if defined(SQT_WINSTUBS_IMPLEMENTATION_kernel32)
static BOOL __stdcall
resolve_CancelIoEx(HANDLE hFile, LPOVERLAPPED lpOverlapped)
{
    ::sqt::winapi::winapi_resolve_kernel32();
    return ::sqt::winapi::zz_funcs_kernel32.funcs._CancelIoEx(hFile, lpOverlapped);
}

static DWORD __stdcall
resolve_GetProcessId(HANDLE Process)
{
    ::sqt::winapi::winapi_resolve_kernel32();
    return ::sqt::winapi::zz_funcs_kernel32.funcs._GetProcessId(Process);
}

static void __stdcall
resolve_GetNativeSystemInfo(LPSYSTEM_INFO lpSystemInfo)
{
    ::sqt::winapi::winapi_resolve_kernel32();
    return ::sqt::winapi::zz_funcs_kernel32.funcs._GetNativeSystemInfo(lpSystemInfo);
}

static BOOL __stdcall
resolve_CheckRemoteDebuggerPresent(HANDLE hProcess, PBOOL pbDebuggerPresent)
{
    ::sqt::winapi::winapi_resolve_kernel32();
    return ::sqt::winapi::zz_funcs_kernel32.funcs._CheckRemoteDebuggerPresent(hProcess, pbDebuggerPresent);
}

static DWORD __stdcall
resolve_WTSGetActiveConsoleSessionId()
{
    ::sqt::winapi::winapi_resolve_kernel32();
    return ::sqt::winapi::zz_funcs_kernel32.funcs._WTSGetActiveConsoleSessionId();
}

static BOOL __stdcall
resolve_GetVolumeNameForVolumeMountPointW(LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength)
{
    ::sqt::winapi::winapi_resolve_kernel32();
    return ::sqt::winapi::zz_funcs_kernel32.funcs._GetVolumeNameForVolumeMountPointW(lpszVolumeMountPoint, lpszVolumeName, cchBufferLength);
}

static BOOL __stdcall
resolve_GetVolumePathNameW(LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength)
{
    ::sqt::winapi::winapi_resolve_kernel32();
    return ::sqt::winapi::zz_funcs_kernel32.funcs._GetVolumePathNameW(lpszFileName, lpszVolumePathName, cchBufferLength);
}

static BOOL __stdcall
resolve_SetFilePointerEx(HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod)
{
    ::sqt::winapi::winapi_resolve_kernel32();
    return ::sqt::winapi::zz_funcs_kernel32.funcs._SetFilePointerEx(hFile, liDistanceToMove, lpNewFilePointer, dwMoveMethod);
}

static BOOL __stdcall
resolve_RegisterWaitForSingleObject(PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags)
{
    ::sqt::winapi::winapi_resolve_kernel32();
    return ::sqt::winapi::zz_funcs_kernel32.funcs._RegisterWaitForSingleObject(phNewWaitObject, hObject, Callback, Context, dwMilliseconds, dwFlags);
}

static BOOL __stdcall
resolve_UnregisterWaitEx(HANDLE WaitHandle, HANDLE CompletionEvent)
{
    ::sqt::winapi::winapi_resolve_kernel32();
    return ::sqt::winapi::zz_funcs_kernel32.funcs._UnregisterWaitEx(WaitHandle, CompletionEvent);
}

static DWORD __stdcall
resolve_GetLongPathNameW(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer)
{
    ::sqt::winapi::winapi_resolve_kernel32();
    return ::sqt::winapi::zz_funcs_kernel32.funcs._GetLongPathNameW(lpszShortPath, lpszLongPath, cchBuffer);
}

static HWND __stdcall
resolve_GetConsoleWindow()
{
    ::sqt::winapi::winapi_resolve_kernel32();
    return ::sqt::winapi::zz_funcs_kernel32.funcs._GetConsoleWindow();
}

static BOOL __stdcall
stub_CancelIoEx(HANDLE hFile, LPOVERLAPPED lpOverlapped);

static DWORD __stdcall
stub_GetProcessId(HANDLE Process);

static void __stdcall
stub_GetNativeSystemInfo(LPSYSTEM_INFO lpSystemInfo);

static BOOL __stdcall
stub_CheckRemoteDebuggerPresent(HANDLE hProcess, PBOOL pbDebuggerPresent);

static DWORD __stdcall
stub_WTSGetActiveConsoleSessionId();

static BOOL __stdcall
stub_GetVolumeNameForVolumeMountPointW(LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength);

static BOOL __stdcall
stub_GetVolumePathNameW(LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength);

static BOOL __stdcall
stub_SetFilePointerEx(HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod);

static BOOL __stdcall
stub_RegisterWaitForSingleObject(PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags);

static BOOL __stdcall
stub_UnregisterWaitEx(HANDLE WaitHandle, HANDLE CompletionEvent);

static DWORD __stdcall
stub_GetLongPathNameW(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer);

static HWND __stdcall
stub_GetConsoleWindow();

static zz_func_table_kernel32 const zz_stub_funcs_kernel32 = {
    &stub_CancelIoEx,
    &stub_GetProcessId,
    &stub_GetNativeSystemInfo,
    &stub_CheckRemoteDebuggerPresent,
    &stub_WTSGetActiveConsoleSessionId,
    &stub_GetVolumeNameForVolumeMountPointW,
    &stub_GetVolumePathNameW,
    &stub_SetFilePointerEx,
    &stub_RegisterWaitForSingleObject,
    &stub_UnregisterWaitEx,
    &stub_GetLongPathNameW,
    &stub_GetConsoleWindow,
};

zz_func_table_kernel32 zz_funcs_kernel32 = {
    &resolve_CancelIoEx,
    &resolve_GetProcessId,
    &resolve_GetNativeSystemInfo,
    &resolve_CheckRemoteDebuggerPresent,
    &resolve_WTSGetActiveConsoleSessionId,
    &resolve_GetVolumeNameForVolumeMountPointW,
    &resolve_GetVolumePathNameW,
    &resolve_SetFilePointerEx,
    &resolve_RegisterWaitForSingleObject,
    &resolve_UnregisterWaitEx,
    &resolve_GetLongPathNameW,
    &resolve_GetConsoleWindow,
};
static char symnames_kernel32[12][34] = {
    /* 0 */ "CancelIoEx",
    /* 1 */ "GetProcessId",
    /* 2 */ "GetNativeSystemInfo",
    /* 3 */ "CheckRemoteDebuggerPresent",
    /* 4 */ "WTSGetActiveConsoleSessionId",
    /* 5 */ "GetVolumeNameForVolumeMountPointW",
    /* 6 */ "GetVolumePathNameW",
    /* 7 */ "SetFilePointerEx",
    /* 8 */ "RegisterWaitForSingleObject",
    /* 9 */ "UnregisterWaitEx",
    /* 10 */ "GetLongPathNameW",
    /* 11 */ "GetConsoleWindow",
};
#endif

#if defined(SQT_WINSTUBS_IMPLEMENTATION_shell32)
static HRESULT __stdcall
resolve_SHGetKnownFolderPath(REFKNOWNFOLDERID rfid, DWORD dwFlags, HANDLE hToken, PWSTR * ppszPath)
{
    ::sqt::winapi::winapi_resolve_shell32();
    return ::sqt::winapi::zz_funcs_shell32.funcs._SHGetKnownFolderPath(rfid, dwFlags, hToken, ppszPath);
}

static HRESULT __stdcall
resolve_SHGetKnownFolderIDList(REFKNOWNFOLDERID rfid, DWORD dwFlags, HANDLE hToken, PIDLIST_ABSOLUTE * ppidl)
{
    ::sqt::winapi::winapi_resolve_shell32();
    return ::sqt::winapi::zz_funcs_shell32.funcs._SHGetKnownFolderIDList(rfid, dwFlags, hToken, ppidl);
}

static HRESULT __stdcall
resolve_SHCreateItemFromParsingName(PCWSTR pszPath, IBindCtx * pbc, REFIID riid, void * * ppv)
{
    ::sqt::winapi::winapi_resolve_shell32();
    return ::sqt::winapi::zz_funcs_shell32.funcs._SHCreateItemFromParsingName(pszPath, pbc, riid, ppv);
}

static HRESULT __stdcall
resolve_SHCreateItemFromIDList(PCIDLIST_ABSOLUTE pidl, REFIID riid, void * * ppv)
{
    ::sqt::winapi::winapi_resolve_shell32();
    return ::sqt::winapi::zz_funcs_shell32.funcs._SHCreateItemFromIDList(pidl, riid, ppv);
}

static HRESULT __stdcall
resolve_SHGetStockIconInfo(SHSTOCKICONID siid, UINT uFlags, SHSTOCKICONINFO * psii)
{
    ::sqt::winapi::winapi_resolve_shell32();
    return ::sqt::winapi::zz_funcs_shell32.funcs._SHGetStockIconInfo(siid, uFlags, psii);
}

static HRESULT __stdcall
resolve_Shell_NotifyIconGetRect(NOTIFYICONIDENTIFIER const * identifier, RECT * iconLocation)
{
    ::sqt::winapi::winapi_resolve_shell32();
    return ::sqt::winapi::zz_funcs_shell32.funcs._Shell_NotifyIconGetRect(identifier, iconLocation);
}

static HRESULT __stdcall
resolve_SHGetImageList(int iImageList, REFIID riid, void * * ppvobj)
{
    ::sqt::winapi::winapi_resolve_shell32();
    return ::sqt::winapi::zz_funcs_shell32.funcs._SHGetImageList(iImageList, riid, ppvobj);
}

static BOOL __stdcall
resolve_SHGetSpecialFolderPathW(HWND hwnd, LPWSTR pszPath, int csidl, BOOL fCreate)
{
    ::sqt::winapi::winapi_resolve_shell32();
    return ::sqt::winapi::zz_funcs_shell32.funcs._SHGetSpecialFolderPathW(hwnd, pszPath, csidl, fCreate);
}

static HRESULT __stdcall
stub_SHGetKnownFolderPath(REFKNOWNFOLDERID rfid, DWORD dwFlags, HANDLE hToken, PWSTR * ppszPath);

static HRESULT __stdcall
stub_SHGetKnownFolderIDList(REFKNOWNFOLDERID rfid, DWORD dwFlags, HANDLE hToken, PIDLIST_ABSOLUTE * ppidl);

static HRESULT __stdcall
stub_SHCreateItemFromParsingName(PCWSTR pszPath, IBindCtx * pbc, REFIID riid, void * * ppv);

static HRESULT __stdcall
stub_SHCreateItemFromIDList(PCIDLIST_ABSOLUTE pidl, REFIID riid, void * * ppv);

static HRESULT __stdcall
stub_SHGetStockIconInfo(SHSTOCKICONID siid, UINT uFlags, SHSTOCKICONINFO * psii);

static HRESULT __stdcall
stub_Shell_NotifyIconGetRect(NOTIFYICONIDENTIFIER const * identifier, RECT * iconLocation);

static HRESULT __stdcall
stub_SHGetImageList(int iImageList, REFIID riid, void * * ppvobj);

static BOOL __stdcall
stub_SHGetSpecialFolderPathW(HWND hwnd, LPWSTR pszPath, int csidl, BOOL fCreate);

static zz_func_table_shell32 const zz_stub_funcs_shell32 = {
    &stub_SHGetKnownFolderPath,
    &stub_SHGetKnownFolderIDList,
    &stub_SHCreateItemFromParsingName,
    &stub_SHCreateItemFromIDList,
    &stub_SHGetStockIconInfo,
    &stub_Shell_NotifyIconGetRect,
    &stub_SHGetImageList,
    &stub_SHGetSpecialFolderPathW,
};

zz_func_table_shell32 zz_funcs_shell32 = {
    &resolve_SHGetKnownFolderPath,
    &resolve_SHGetKnownFolderIDList,
    &resolve_SHCreateItemFromParsingName,
    &resolve_SHCreateItemFromIDList,
    &resolve_SHGetStockIconInfo,
    &resolve_Shell_NotifyIconGetRect,
    &resolve_SHGetImageList,
    &resolve_SHGetSpecialFolderPathW,
};
static char symnames_shell32[8][28] = {
    /* 0 */ "SHGetKnownFolderPath",
    /* 1 */ "SHGetKnownFolderIDList",
    /* 2 */ "SHCreateItemFromParsingName",
    /* 3 */ "SHCreateItemFromIDList",
    /* 4 */ "SHGetStockIconInfo",
    /* 5 */ "Shell_NotifyIconGetRect",
    /* 6 */ "SHGetImageList",
    /* 7 */ "SHGetSpecialFolderPathW",
};
#endif

#if defined(SQT_WINSTUBS_IMPLEMENTATION_user32)
static BOOL __stdcall
resolve_RegisterTouchWindow(HWND hwnd, ULONG ulFlags)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._RegisterTouchWindow(hwnd, ulFlags);
}

static BOOL __stdcall
resolve_UnregisterTouchWindow(HWND hwnd)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._UnregisterTouchWindow(hwnd);
}

static BOOL __stdcall
resolve_IsTouchWindow(HWND hwnd, PULONG pulFlags)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._IsTouchWindow(hwnd, pulFlags);
}

static BOOL __stdcall
resolve_CloseTouchInputHandle(HTOUCHINPUT hTouchInput)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._CloseTouchInputHandle(hTouchInput);
}

static BOOL __stdcall
resolve_GetTouchInputInfo(HTOUCHINPUT hTouchInput, UINT cInputs, PTOUCHINPUT pInputs, int cbSize)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._GetTouchInputInfo(hTouchInput, cInputs, pInputs, cbSize);
}

static BOOL __stdcall
resolve_UpdateLayeredWindowIndirect(HWND hwnd, UPDATELAYEREDWINDOWINFO const * pULWInfo)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._UpdateLayeredWindowIndirect(hwnd, pULWInfo);
}

static BOOL __stdcall
resolve_ChangeWindowMessageFilterEx(HWND hwnd, UINT message, DWORD action, PCHANGEFILTERSTRUCT pChangeFilterStruct)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._ChangeWindowMessageFilterEx(hwnd, message, action, pChangeFilterStruct);
}

static HPOWERNOTIFY __stdcall
resolve_RegisterPowerSettingNotification(HANDLE hRecipient, LPCGUID PowerSettingGuid, DWORD Flags)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._RegisterPowerSettingNotification(hRecipient, PowerSettingGuid, Flags);
}

static BOOL __stdcall
resolve_UnregisterPowerSettingNotification(HPOWERNOTIFY Handle)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._UnregisterPowerSettingNotification(Handle);
}

static HDEVNOTIFY __stdcall
resolve_RegisterDeviceNotificationW(HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._RegisterDeviceNotificationW(hRecipient, NotificationFilter, Flags);
}

static BOOL __stdcall
resolve_UnregisterDeviceNotification(HDEVNOTIFY Handle)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._UnregisterDeviceNotification(Handle);
}

static BOOL __stdcall
resolve_SetLayeredWindowAttributes(HWND hwnd, COLORREF crKey, BYTE bAlpha, DWORD dwFlags)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._SetLayeredWindowAttributes(hwnd, crKey, bAlpha, dwFlags);
}

static BOOL __stdcall
resolve_UpdateLayeredWindow(HWND hWnd, HDC hdcDst, POINT * pptDst, SIZE * psize, HDC hdcSrc, POINT * pptSrc, COLORREF crKey, BLENDFUNCTION * pblend, DWORD dwFlags)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._UpdateLayeredWindow(hWnd, hdcDst, pptDst, psize, hdcSrc, pptSrc, crKey, pblend, dwFlags);
}

static HMONITOR __stdcall
resolve_MonitorFromPoint(POINT pt, DWORD dwFlags)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._MonitorFromPoint(pt, dwFlags);
}

static HMONITOR __stdcall
resolve_MonitorFromWindow(HWND hwnd, DWORD dwFlags)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._MonitorFromWindow(hwnd, dwFlags);
}

static BOOL __stdcall
resolve_EnumDisplayMonitors(HDC hdc, LPCRECT lprcClip, MONITORENUMPROC lpfnEnum, LPARAM dwData)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._EnumDisplayMonitors(hdc, lprcClip, lpfnEnum, dwData);
}

static BOOL __stdcall
resolve_GetMonitorInfoW(HMONITOR hMonitor, LPMONITORINFO lpmi)
{
    ::sqt::winapi::winapi_resolve_user32();
    return ::sqt::winapi::zz_funcs_user32.funcs._GetMonitorInfoW(hMonitor, lpmi);
}

static BOOL __stdcall
stub_RegisterTouchWindow(HWND hwnd, ULONG ulFlags);

static BOOL __stdcall
stub_UnregisterTouchWindow(HWND hwnd);

static BOOL __stdcall
stub_IsTouchWindow(HWND hwnd, PULONG pulFlags);

static BOOL __stdcall
stub_CloseTouchInputHandle(HTOUCHINPUT hTouchInput);

static BOOL __stdcall
stub_GetTouchInputInfo(HTOUCHINPUT hTouchInput, UINT cInputs, PTOUCHINPUT pInputs, int cbSize);

static BOOL __stdcall
stub_UpdateLayeredWindowIndirect(HWND hwnd, UPDATELAYEREDWINDOWINFO const * pULWInfo);

static BOOL __stdcall
stub_ChangeWindowMessageFilterEx(HWND hwnd, UINT message, DWORD action, PCHANGEFILTERSTRUCT pChangeFilterStruct);

static HPOWERNOTIFY __stdcall
stub_RegisterPowerSettingNotification(HANDLE hRecipient, LPCGUID PowerSettingGuid, DWORD Flags);

static BOOL __stdcall
stub_UnregisterPowerSettingNotification(HPOWERNOTIFY Handle);

static HDEVNOTIFY __stdcall
stub_RegisterDeviceNotificationW(HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags);

static BOOL __stdcall
stub_UnregisterDeviceNotification(HDEVNOTIFY Handle);

static BOOL __stdcall
stub_SetLayeredWindowAttributes(HWND hwnd, COLORREF crKey, BYTE bAlpha, DWORD dwFlags);

static BOOL __stdcall
stub_UpdateLayeredWindow(HWND hWnd, HDC hdcDst, POINT * pptDst, SIZE * psize, HDC hdcSrc, POINT * pptSrc, COLORREF crKey, BLENDFUNCTION * pblend, DWORD dwFlags);

static HMONITOR __stdcall
stub_MonitorFromPoint(POINT pt, DWORD dwFlags);

static HMONITOR __stdcall
stub_MonitorFromWindow(HWND hwnd, DWORD dwFlags);

static BOOL __stdcall
stub_EnumDisplayMonitors(HDC hdc, LPCRECT lprcClip, MONITORENUMPROC lpfnEnum, LPARAM dwData);

static BOOL __stdcall
stub_GetMonitorInfoW(HMONITOR hMonitor, LPMONITORINFO lpmi);

static zz_func_table_user32 const zz_stub_funcs_user32 = {
    &stub_RegisterTouchWindow,
    &stub_UnregisterTouchWindow,
    &stub_IsTouchWindow,
    &stub_CloseTouchInputHandle,
    &stub_GetTouchInputInfo,
    &stub_UpdateLayeredWindowIndirect,
    &stub_ChangeWindowMessageFilterEx,
    &stub_RegisterPowerSettingNotification,
    &stub_UnregisterPowerSettingNotification,
    &stub_RegisterDeviceNotificationW,
    &stub_UnregisterDeviceNotification,
    &stub_SetLayeredWindowAttributes,
    &stub_UpdateLayeredWindow,
    &stub_MonitorFromPoint,
    &stub_MonitorFromWindow,
    &stub_EnumDisplayMonitors,
    &stub_GetMonitorInfoW,
};

zz_func_table_user32 zz_funcs_user32 = {
    &resolve_RegisterTouchWindow,
    &resolve_UnregisterTouchWindow,
    &resolve_IsTouchWindow,
    &resolve_CloseTouchInputHandle,
    &resolve_GetTouchInputInfo,
    &resolve_UpdateLayeredWindowIndirect,
    &resolve_ChangeWindowMessageFilterEx,
    &resolve_RegisterPowerSettingNotification,
    &resolve_UnregisterPowerSettingNotification,
    &resolve_RegisterDeviceNotificationW,
    &resolve_UnregisterDeviceNotification,
    &resolve_SetLayeredWindowAttributes,
    &resolve_UpdateLayeredWindow,
    &resolve_MonitorFromPoint,
    &resolve_MonitorFromWindow,
    &resolve_EnumDisplayMonitors,
    &resolve_GetMonitorInfoW,
};
static char symnames_user32[17][35] = {
    /* 0 */ "RegisterTouchWindow",
    /* 1 */ "UnregisterTouchWindow",
    /* 2 */ "IsTouchWindow",
    /* 3 */ "CloseTouchInputHandle",
    /* 4 */ "GetTouchInputInfo",
    /* 5 */ "UpdateLayeredWindowIndirect",
    /* 6 */ "ChangeWindowMessageFilterEx",
    /* 7 */ "RegisterPowerSettingNotification",
    /* 8 */ "UnregisterPowerSettingNotification",
    /* 9 */ "RegisterDeviceNotificationW",
    /* 10 */ "UnregisterDeviceNotification",
    /* 11 */ "SetLayeredWindowAttributes",
    /* 12 */ "UpdateLayeredWindow",
    /* 13 */ "MonitorFromPoint",
    /* 14 */ "MonitorFromWindow",
    /* 15 */ "EnumDisplayMonitors",
    /* 16 */ "GetMonitorInfoW",
};
#endif

#if defined(SQT_WINSTUBS_IMPLEMENTATION_wtsapi32)
static BOOL __stdcall
resolve_WTSQuerySessionInformationW(HANDLE hServer, DWORD SessionId, WTS_INFO_CLASS WTSInfoClass, LPWSTR * ppBuffer, DWORD * pBytesReturned)
{
    ::sqt::winapi::winapi_resolve_wtsapi32();
    return ::sqt::winapi::zz_funcs_wtsapi32.funcs._WTSQuerySessionInformationW(hServer, SessionId, WTSInfoClass, ppBuffer, pBytesReturned);
}

static void __stdcall
resolve_WTSFreeMemory(PVOID pMemory)
{
    ::sqt::winapi::winapi_resolve_wtsapi32();
    return ::sqt::winapi::zz_funcs_wtsapi32.funcs._WTSFreeMemory(pMemory);
}

static BOOL __stdcall
stub_WTSQuerySessionInformationW(HANDLE hServer, DWORD SessionId, WTS_INFO_CLASS WTSInfoClass, LPWSTR * ppBuffer, DWORD * pBytesReturned);

static void __stdcall
stub_WTSFreeMemory(PVOID pMemory);

static zz_func_table_wtsapi32 const zz_stub_funcs_wtsapi32 = {
    &stub_WTSQuerySessionInformationW,
    &stub_WTSFreeMemory,
};

zz_func_table_wtsapi32 zz_funcs_wtsapi32 = {
    &resolve_WTSQuerySessionInformationW,
    &resolve_WTSFreeMemory,
};
static char symnames_wtsapi32[2][28] = {
    /* 0 */ "WTSQuerySessionInformationW",
    /* 1 */ "WTSFreeMemory",
};
#endif

#endif // !defined(SQT_WINSTUBS_NO_IMPLEMENTATION)

} } // namespace sqt::winapi

#if !defined(SQT_WINSTUBS_NO_PREPROC_FORWARDING)
    #if defined(SystemFunction036)
        #undef SystemFunction036
    #endif
    #define SystemFunction036 sqt::winapi::zz_funcs_advapi32.funcs._SystemFunction036

    #if defined(DwmIsCompositionEnabled)
        #undef DwmIsCompositionEnabled
    #endif
    #define DwmIsCompositionEnabled sqt::winapi::zz_funcs_dwmapi.funcs._DwmIsCompositionEnabled

    #if defined(DwmEnableBlurBehindWindow)
        #undef DwmEnableBlurBehindWindow
    #endif
    #define DwmEnableBlurBehindWindow sqt::winapi::zz_funcs_dwmapi.funcs._DwmEnableBlurBehindWindow

    #if defined(DwmSetWindowAttribute)
        #undef DwmSetWindowAttribute
    #endif
    #define DwmSetWindowAttribute sqt::winapi::zz_funcs_dwmapi.funcs._DwmSetWindowAttribute

    #if defined(DwmGetWindowAttribute)
        #undef DwmGetWindowAttribute
    #endif
    #define DwmGetWindowAttribute sqt::winapi::zz_funcs_dwmapi.funcs._DwmGetWindowAttribute

    #if defined(AddFontResourceExW)
        #undef AddFontResourceExW
    #endif
    #define AddFontResourceExW sqt::winapi::zz_funcs_gdi32.funcs._AddFontResourceExW

    #if defined(AddFontMemResourceEx)
        #undef AddFontMemResourceEx
    #endif
    #define AddFontMemResourceEx sqt::winapi::zz_funcs_gdi32.funcs._AddFontMemResourceEx

    #if defined(RemoveFontResourceExW)
        #undef RemoveFontResourceExW
    #endif
    #define RemoveFontResourceExW sqt::winapi::zz_funcs_gdi32.funcs._RemoveFontResourceExW

    #if defined(RemoveFontMemResourceEx)
        #undef RemoveFontMemResourceEx
    #endif
    #define RemoveFontMemResourceEx sqt::winapi::zz_funcs_gdi32.funcs._RemoveFontMemResourceEx

    #if defined(SetLayout)
        #undef SetLayout
    #endif
    #define SetLayout sqt::winapi::zz_funcs_gdi32.funcs._SetLayout

    #if defined(ImmAssociateContextEx)
        #undef ImmAssociateContextEx
    #endif
    #define ImmAssociateContextEx sqt::winapi::zz_funcs_imm32.funcs._ImmAssociateContextEx

    #if defined(CancelIoEx)
        #undef CancelIoEx
    #endif
    #define CancelIoEx sqt::winapi::zz_funcs_kernel32.funcs._CancelIoEx

    #if defined(GetProcessId)
        #undef GetProcessId
    #endif
    #define GetProcessId sqt::winapi::zz_funcs_kernel32.funcs._GetProcessId

    #if defined(GetNativeSystemInfo)
        #undef GetNativeSystemInfo
    #endif
    #define GetNativeSystemInfo sqt::winapi::zz_funcs_kernel32.funcs._GetNativeSystemInfo

    #if defined(CheckRemoteDebuggerPresent)
        #undef CheckRemoteDebuggerPresent
    #endif
    #define CheckRemoteDebuggerPresent sqt::winapi::zz_funcs_kernel32.funcs._CheckRemoteDebuggerPresent

    #if defined(WTSGetActiveConsoleSessionId)
        #undef WTSGetActiveConsoleSessionId
    #endif
    #define WTSGetActiveConsoleSessionId sqt::winapi::zz_funcs_kernel32.funcs._WTSGetActiveConsoleSessionId

    #if defined(GetVolumeNameForVolumeMountPointW)
        #undef GetVolumeNameForVolumeMountPointW
    #endif
    #define GetVolumeNameForVolumeMountPointW sqt::winapi::zz_funcs_kernel32.funcs._GetVolumeNameForVolumeMountPointW

    #if defined(GetVolumePathNameW)
        #undef GetVolumePathNameW
    #endif
    #define GetVolumePathNameW sqt::winapi::zz_funcs_kernel32.funcs._GetVolumePathNameW

    #if defined(SetFilePointerEx)
        #undef SetFilePointerEx
    #endif
    #define SetFilePointerEx sqt::winapi::zz_funcs_kernel32.funcs._SetFilePointerEx

    #if defined(RegisterWaitForSingleObject)
        #undef RegisterWaitForSingleObject
    #endif
    #define RegisterWaitForSingleObject sqt::winapi::zz_funcs_kernel32.funcs._RegisterWaitForSingleObject

    #if defined(UnregisterWaitEx)
        #undef UnregisterWaitEx
    #endif
    #define UnregisterWaitEx sqt::winapi::zz_funcs_kernel32.funcs._UnregisterWaitEx

    #if defined(GetLongPathNameW)
        #undef GetLongPathNameW
    #endif
    #define GetLongPathNameW sqt::winapi::zz_funcs_kernel32.funcs._GetLongPathNameW

    #if defined(GetConsoleWindow)
        #undef GetConsoleWindow
    #endif
    #define GetConsoleWindow sqt::winapi::zz_funcs_kernel32.funcs._GetConsoleWindow

    #if defined(SHGetKnownFolderPath)
        #undef SHGetKnownFolderPath
    #endif
    #define SHGetKnownFolderPath sqt::winapi::zz_funcs_shell32.funcs._SHGetKnownFolderPath

    #if defined(SHGetKnownFolderIDList)
        #undef SHGetKnownFolderIDList
    #endif
    #define SHGetKnownFolderIDList sqt::winapi::zz_funcs_shell32.funcs._SHGetKnownFolderIDList

    #if defined(SHCreateItemFromParsingName)
        #undef SHCreateItemFromParsingName
    #endif
    #define SHCreateItemFromParsingName sqt::winapi::zz_funcs_shell32.funcs._SHCreateItemFromParsingName

    #if defined(SHCreateItemFromIDList)
        #undef SHCreateItemFromIDList
    #endif
    #define SHCreateItemFromIDList sqt::winapi::zz_funcs_shell32.funcs._SHCreateItemFromIDList

    #if defined(SHGetStockIconInfo)
        #undef SHGetStockIconInfo
    #endif
    #define SHGetStockIconInfo sqt::winapi::zz_funcs_shell32.funcs._SHGetStockIconInfo

    #if defined(Shell_NotifyIconGetRect)
        #undef Shell_NotifyIconGetRect
    #endif
    #define Shell_NotifyIconGetRect sqt::winapi::zz_funcs_shell32.funcs._Shell_NotifyIconGetRect

    #if defined(SHGetImageList)
        #undef SHGetImageList
    #endif
    #define SHGetImageList sqt::winapi::zz_funcs_shell32.funcs._SHGetImageList

    #if defined(SHGetSpecialFolderPathW)
        #undef SHGetSpecialFolderPathW
    #endif
    #define SHGetSpecialFolderPathW sqt::winapi::zz_funcs_shell32.funcs._SHGetSpecialFolderPathW

    #if defined(RegisterTouchWindow)
        #undef RegisterTouchWindow
    #endif
    #define RegisterTouchWindow sqt::winapi::zz_funcs_user32.funcs._RegisterTouchWindow

    #if defined(UnregisterTouchWindow)
        #undef UnregisterTouchWindow
    #endif
    #define UnregisterTouchWindow sqt::winapi::zz_funcs_user32.funcs._UnregisterTouchWindow

    #if defined(IsTouchWindow)
        #undef IsTouchWindow
    #endif
    #define IsTouchWindow sqt::winapi::zz_funcs_user32.funcs._IsTouchWindow

    #if defined(CloseTouchInputHandle)
        #undef CloseTouchInputHandle
    #endif
    #define CloseTouchInputHandle sqt::winapi::zz_funcs_user32.funcs._CloseTouchInputHandle

    #if defined(GetTouchInputInfo)
        #undef GetTouchInputInfo
    #endif
    #define GetTouchInputInfo sqt::winapi::zz_funcs_user32.funcs._GetTouchInputInfo

    #if defined(UpdateLayeredWindowIndirect)
        #undef UpdateLayeredWindowIndirect
    #endif
    #define UpdateLayeredWindowIndirect sqt::winapi::zz_funcs_user32.funcs._UpdateLayeredWindowIndirect

    #if defined(ChangeWindowMessageFilterEx)
        #undef ChangeWindowMessageFilterEx
    #endif
    #define ChangeWindowMessageFilterEx sqt::winapi::zz_funcs_user32.funcs._ChangeWindowMessageFilterEx

    #if defined(RegisterPowerSettingNotification)
        #undef RegisterPowerSettingNotification
    #endif
    #define RegisterPowerSettingNotification sqt::winapi::zz_funcs_user32.funcs._RegisterPowerSettingNotification

    #if defined(UnregisterPowerSettingNotification)
        #undef UnregisterPowerSettingNotification
    #endif
    #define UnregisterPowerSettingNotification sqt::winapi::zz_funcs_user32.funcs._UnregisterPowerSettingNotification

    #if defined(RegisterDeviceNotificationW)
        #undef RegisterDeviceNotificationW
    #endif
    #define RegisterDeviceNotificationW sqt::winapi::zz_funcs_user32.funcs._RegisterDeviceNotificationW

    #if defined(UnregisterDeviceNotification)
        #undef UnregisterDeviceNotification
    #endif
    #define UnregisterDeviceNotification sqt::winapi::zz_funcs_user32.funcs._UnregisterDeviceNotification

    #if defined(SetLayeredWindowAttributes)
        #undef SetLayeredWindowAttributes
    #endif
    #define SetLayeredWindowAttributes sqt::winapi::zz_funcs_user32.funcs._SetLayeredWindowAttributes

    #if defined(UpdateLayeredWindow)
        #undef UpdateLayeredWindow
    #endif
    #define UpdateLayeredWindow sqt::winapi::zz_funcs_user32.funcs._UpdateLayeredWindow

    #if defined(MonitorFromPoint)
        #undef MonitorFromPoint
    #endif
    #define MonitorFromPoint sqt::winapi::zz_funcs_user32.funcs._MonitorFromPoint

    #if defined(MonitorFromWindow)
        #undef MonitorFromWindow
    #endif
    #define MonitorFromWindow sqt::winapi::zz_funcs_user32.funcs._MonitorFromWindow

    #if defined(EnumDisplayMonitors)
        #undef EnumDisplayMonitors
    #endif
    #define EnumDisplayMonitors sqt::winapi::zz_funcs_user32.funcs._EnumDisplayMonitors

    #if defined(GetMonitorInfoW)
        #undef GetMonitorInfoW
    #endif
    #define GetMonitorInfoW sqt::winapi::zz_funcs_user32.funcs._GetMonitorInfoW

    #if defined(WTSQuerySessionInformationW)
        #undef WTSQuerySessionInformationW
    #endif
    #define WTSQuerySessionInformationW sqt::winapi::zz_funcs_wtsapi32.funcs._WTSQuerySessionInformationW

    #if defined(WTSFreeMemory)
        #undef WTSFreeMemory
    #endif
    #define WTSFreeMemory sqt::winapi::zz_funcs_wtsapi32.funcs._WTSFreeMemory

#endif // !defined(SQT_WINSTUBS_NO_PREPROC_FORWARDING)

